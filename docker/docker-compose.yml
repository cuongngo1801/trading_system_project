version: '3.8'

services:
  # Kafka in KRaft mode (no Zookeeper needed)
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: trading-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9101:9101"
    environment:
      # KRaft mode configuration
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'

      # Cluster configuration
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

      # Replication and topic settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1

      # JMX and metrics
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      # KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      # KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      # KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous

      # Log settings
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    volumes:
      - kafka_data:/var/lib/kafka/data
    tmpfs:
      - /tmp/kraft-combined-logs
    networks:
      - trading-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    hostname: postgres
    container_name: trading-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading-network

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    hostname: timescaledb
    container_name: trading-timescaledb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: trading_timescale
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: timescale_password
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ../docker/timescaledb/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: trading-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - trading-network

  # Trading System Application
  trading-system:
    build:
      context: ..
      dockerfile: docker/Dockerfile.trading-system
    hostname: trading-system
    container_name: trading-system-app
    depends_on:
      - kafka
      - postgres
      - timescaledb
      - redis
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_db
      - TIMESCALE_DB_URL=postgresql://timescale_user:timescale_password@timescaledb:5432/trading_timescale
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - ../config:/app/config
      - ../logs:/app/logs
    networks:
      - trading-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: trading-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trading-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: trading-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../docker/grafana/provisioning:/etc/grafana/provisioning
      - ../docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - trading-network

  # Kafka Connect for data integration
  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    hostname: kafka-connect
    container_name: trading-kafka-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: trading-connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: '[%d] %p %X{connector.context}%m (%c:%L)%n'
    volumes:
      - ../docker/kafka-connect/plugins:/usr/share/confluent-hub-components
    networks:
      - trading-network

volumes:
  postgres_data:
  timescale_data:
  kafka_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trading-network:
    driver: bridge
